#!/usr/bin/env ruby
#require 'goliath'
require 'goliath/api'
require 'goliath/runner'

require 'blobsterix'

# runner = Goliath::Runner.new(ARGV, nil)
# runner.api = BlobServer::Service.new
# runner.app = Goliath::Rack::Builder.build(BlobServer::Service, runner.api)
# runner.run
require "fileutils"

BLOBSTERIX_GEM_DIR = File.join(File.dirname(__FILE__), "../")
BLOBSTERIX_DATA_DIR = Dir.pwd

class Generator
  def initialize(args)
    args.each{|command|
      @param ||= command if command != "generate" and @type
      @type ||= command if command != "generate"
    }
  end

  def run()
    puts "Doing #{@type} with #{@param} in #{Dir.pwd}"

    init(@param) if @type == "init"
    transformation(@param) if @type == "transformator"
  end

  def init(folder="")
    FileUtils.cp(File.join(BLOBSTERIX_GEM_DIR, "config/Gemfile"), File.join(BLOBSTERIX_DATA_DIR, folder, "Gemfile")) if !File.exist?(File.join(BLOBSTERIX_DATA_DIR, folder, "Gemfile"))
    FileUtils.cp(File.join(BLOBSTERIX_GEM_DIR, "config/blobsterix_config.rb"), File.join(BLOBSTERIX_DATA_DIR, folder, "blobsterix_config.rb")) if !File.exist?(File.join(BLOBSTERIX_DATA_DIR, folder, "blobsterix_config.rb"))
    FileUtils.mkdir_p(File.join(BLOBSTERIX_DATA_DIR, folder, "transformators"))
  end

  def transformation(name="NewTrafo")
    trafo_dir = File.join(BLOBSTERIX_DATA_DIR, "transformators")
    FileUtils.mkdir_p(trafo_dir)
    new_transformator = File.read(File.join(BLOBSTERIX_GEM_DIR, "config/transformation_template.rb"))
    new_transformator = new_transformator.gsub("$ClassName", name.capitalize)
    new_transformator = new_transformator.gsub("$url_name", name.downcase)
    File.write(File.join(trafo_dir, "#{name.downcase}_transformation.rb"), new_transformator)
  end
end
class BlobsterixRunner

  def run_blobsterix()
    require_config()
    require_transformators()

    runner = Goliath::Runner.new(ARGV, nil)

    runner.port = BlobServer.port if BlobServer.respond_to?(:port)
    runner.address = BlobServer.address if BlobServer.respond_to?(:address)

    Goliath.env = BlobServer.env if BlobServer.respond_to?(:env)

    runner.api = BlobServer::Service.new
    runner.app = Goliath::Rack::Builder.build(BlobServer::Service, runner.api)

    puts "Now starting Blobsterix...."
    runner.run
  end

  private
    def require_config()
      require File.join(BLOBSTERIX_DATA_DIR, "blobsterix_config.rb") if (File.exist?(File.join(BLOBSTERIX_DATA_DIR, "blobsterix_config.rb")))
    end

    def require_transformators()
      trafo_dir = File.join(BLOBSTERIX_DATA_DIR, "transformators")
      return if not File.exist?(trafo_dir)
      Dir.entries(trafo_dir).each{|dir|
        if !File.directory? File.join(trafo_dir,dir) and !(dir =='.' || dir == '..')
          require "#{File.join(trafo_dir,dir)}"
        end
      }
    end
end

puts "Blobsterix #{BlobServer::VERSION}"
if ARGV.length == 0
  puts "Usage: "
  puts "\tserver (goliath server options) - \n\t\tStarts blobsterix. When a blobsterix config is present in the executing folder it \n\t\twill be used otherwise blobsterix will run with standard options."
  puts "\tgenerate generator (param) - Used to generate blobsterix server files"
  puts "\t\t init (foldername) - Creates a new blobsterix project. When a foldername is supplied it will be created in that folder."
  puts "\t\t transformator (TrafoName) - Creates a new blobsterix transformator with the given name or just new as name."
  exit
end
if ARGV[0] == "server"
  BlobsterixRunner.new.run_blobsterix
elsif ARGV[0] == "generate"
  Generator.new(ARGV).run
end
